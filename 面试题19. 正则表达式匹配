请实现一个函数用来匹配包含'. '和'*'的正则表达式。模式中的字符'.'表示任意一个字符，而'*'表示它前面的字符可以出现任意次（含0次）。在本题中，匹配是指字符串的所有字符匹配整个模式。例如，字符串"aaa"与模式"a.a"和"ab*ac*a"匹配，但与"aa.a"和"ab*a"均不匹配。

示例 1:

输入:
s = "aa"
p = "a"
输出: false
解释: "a" 无法匹配 "aa" 整个字符串。
示例 2:

输入:
s = "aa"
p = "a*"
输出: true
解释: 因为 '*' 代表可以匹配零个或多个前面的那一个元素, 在这里前面的元素就是 'a'。因此，字符串 "aa" 可被视为 'a' 重复了一次。
示例 3:

输入:
s = "ab"
p = ".*"
输出: true
解释: ".*" 表示可匹配零个或多个（'*'）任意字符（'.'）。
示例 4:

输入:
s = "aab"
p = "c*a*b"
输出: true
解释: 因为 '*' 表示零个或多个，这里 'c' 为 0 个, 'a' 被重复一次。因此可以匹配字符串 "aab"。
示例 5:

输入:
s = "mississippi"
p = "mis*is*p*."
输出: false
s 可能为空，且只包含从 a-z 的小写字母。
p 可能为空，且只包含从 a-z 的小写字母，以及字符 . 和 *。

-------------------------------------------Code--------------------------------------------------
class Solution {
    public boolean isMatch(String s, String p) {
        /*
         * 动态规划
         * dp[i][j]表示s的前i个字符串能否和p的前j个字符串匹配
         * 如果p[j]为字母且s[i]=p[j]或者"."，则dp[i][j] = dp[i-1][j-1]
         * 如果p[j]为*，有两种可能(需要注意，这两种都有可能出现)
         * p[j-1] * 直接在s串中没有出现，即0次，则dp[i][j] = dp[i][j-2]
         * 如果出现了多次，则dp[i][j] = dp[i-1][j]
         */
        int m = s.length();
        int n = p.length();
        // 注意这里dp大小是(m+1)*(n+1)，因为dp[0][0]表示s和p都为空
        boolean[][] dp = new boolean[m+1][n+1];
        // dp初始化
        dp[0][0] = true;
        // dp[i][0]应该全是false dp[0][i]初始化则需要判断
        for (int i = 1; i <= n; i++) {
            // 如果p[i]不是*的话，dp[0][i]必定为false，为*则dp[0][i] = dp[0][i-2]
            if (p.charAt(i-1) == '*') {
                dp[0][i] = dp[0][i-2];
            }
        }
        
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                if (p.charAt(j-1) == '*') {
                    // 注意*这种情况
                    // 如果p[j-2] = '.'或者p[j-2] = s[i-1]，则有可能s[i-1]是和p[j-2] * 匹配的最后一个
                    if (p.charAt(j-2) == '.' || p.charAt(j-2) == s.charAt(i-1)) {
                        dp[i][j] = dp[i-1][j];
                    }
                    // 这是p[j-2] * 匹配到0个字符的情况
                    dp[i][j] = dp[i][j] || dp[i][j-2];
                } else if (p.charAt(j-1) == '.' || p.charAt(j-1) == s.charAt(i-1)) {
                    dp[i][j] = dp[i-1][j-1];
                }
            }
        }
        return dp[m][n];
    }
}
