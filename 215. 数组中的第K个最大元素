在未排序的数组中找到第 k 个最大的元素。请注意，你需要找的是数组排序后的第 k 个最大的元素，而不是第 k 个不同的元素。

示例 1:

输入: [3,2,1,5,6,4] 和 k = 2
输出: 5
示例 2:

输入: [3,2,3,1,2,4,5,5,6] 和 k = 4
输出: 4
说明:

你可以假设 k 总是有效的，且 1 ≤ k ≤ 数组的长度。

--------------------------------------------Code---------------------------------------------------
class Solution {
    public int findKthLargest(int[] nums, int k) {
        // 快速排序，思路类似于topK问题，避免极端测试用例，可以对key采用随机选择的策略
        return help(nums, 0, nums.length - 1, k);
    }

    public int help(int[] nums, int left, int right, int k) {
        int key = nums[left];
        int i = left, j = right;
        while (i < j) {
            while (i < j && nums[j] >= key) {
                j--;
            }
            while (i < j && nums[i] <= key) {
                i++;
            }
            if (i < j) {
                int temp = nums[i];
                nums[i] = nums[j];
                nums[j] = temp;
            }
        }
        nums[left] = nums[i];
        nums[i] = key;
        
        if (i == nums.length - k) {
            return nums[i];
        } else if (i < nums.length - k) {
            return help(nums, i + 1, right, k);
        } else {
            return help(nums, left, i - 1, k);
        }
    }
}
