给定一个含有 n 个正整数的数组和一个正整数 s ，找出该数组中满足其和 ≥ s 的长度最小的连续子数组，并返回其长度。如果不存在符合条件的连续子数组，返回 0。

 

示例：

输入：s = 7, nums = [2,3,1,2,4,3]
输出：2
解释：子数组 [4,3] 是该条件下的长度最小的连续子数组。
 

进阶：

如果你已经完成了 O(n) 时间复杂度的解法, 请尝试 O(n log n) 时间复杂度的解法。

----------------------------------Code----------------------------------------
class Solution {
    public int minSubArrayLen(int s, int[] nums) {
        // 双指针方法
        if (nums == null || nums.length == 0) return 0;
        int i = 0, j = 0;
        int sum = nums[0];
        int minLength = nums.length + 1;
        while (i < nums.length) {
            if (sum < s) {
                if (j == nums.length - 1) break;
                sum += nums[++j];
            } else {
                minLength = Math.min(minLength, j - i + 1);
                sum -= nums[i++];
            }
        }
        return minLength <= nums.length ? minLength : 0;
    }
}
