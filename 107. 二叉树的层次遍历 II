给定一个二叉树，返回其节点值自底向上的层次遍历。 （即按从叶子节点所在层到根节点所在的层，逐层从左向右遍历）

例如：
给定二叉树 [3,9,20,null,null,15,7],

    3
   / \
  9  20
    /  \
   15   7
返回其自底向上的层次遍历为：

[
  [15,7],
  [9,20],
  [3]
]

--------------------------------------------Code----------------------------------------------  
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
        // 二叉树的层序遍历，需要用到队列
        // java LinkedList类实现了Queue接口，可以当成队列来使用 
        // Queue<TreeNode> queue = new LinkedList<TreeNode>();
        // queue.offer(root);
        // while (!queue.isEmpty()) {
        //     TreeNode node = queue.poll();
        //     System.out.print(node.val + " ");
        //     if (node.left != null) queue.offer(node.left);
        //     if (node.right != null) queue.offer(node.right);
        // }

        // 此题，思路和层序遍历类似
        // 注意这个泛型的用法，不能乱用。因为java里面如果B是A的子类，但是B<E>却不是A<E>的子类
        // LinkedList<LinkedList<Integer>> result = new LinkedList<LinkedList<Integer>>();
        LinkedList<List<Integer>> result = new LinkedList<>();
        if (root == null) return result;
        
        Queue<TreeNode> queue = new LinkedList<TreeNode>();
        queue.offer(root);
        while (!queue.isEmpty()) {
            LinkedList<Integer> level = new LinkedList<Integer>();
            int count = queue.size();
            for (int i = 0; i < count; i++) {
                TreeNode node = queue.poll();
                level.add(node.val);
                if (node.left != null) {
                    queue.offer(node.left);
                }
                if (node.right != null) {
                    queue.offer(node.right);
                }
            }
            result.addFirst(level);
        }
        return result;
    }
}
