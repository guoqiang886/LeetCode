给定一个非负整数数组，你最初位于数组的第一个位置。

数组中的每个元素代表你在该位置可以跳跃的最大长度。

判断你是否能够到达最后一个位置。

示例 1:

输入: [2,3,1,1,4]
输出: true
解释: 我们可以先跳 1 步，从位置 0 到达 位置 1, 然后再从位置 1 跳 3 步到达最后一个位置。
示例 2:

输入: [3,2,1,0,4]
输出: false
解释: 无论怎样，你总会到达索引为 3 的位置。但该位置的最大跳跃长度是 0 ， 所以你永远不可能到达最后一个位置。

--------------------------------------Code-----------------------------------------
class Solution {
    public boolean canJump(int[] nums) {
        /*
         * 我的思路：直接递归寻找是否能到达最后一个位置，但是这种做法超时了
         * 改进：上面这种做法重复度太高，很多位置已经判断过了仍有很多重复，
         * 因此使用visited数组来记录是否访问过，这种方法可以勉强通过
         */
        // boolean[] visted = new boolean[nums.length];
        // return helper(nums, 0, visted);

        // 贪心算法
        int maxReach = 0;
        for (int i = 0; i < nums.length; i++) {
            if (i > maxReach) return false;
            maxReach = Math.max(maxReach, i + nums[i]);
            if (maxReach >= nums.length - 1) return true;
        }
        return false;
    }
    
    // public boolean helper(int[] nums, int index, boolean[] visited) {
    //     if (index + nums[index] >= nums.length - 1) return true;
    //     for (int i = 1; i <= nums[index]; i++) {
    //         if (!visited[index+i]) {
    //             if (helper(nums, index + i, visited)) return true;
    //             else  visited[index+i] = true;
    //         }
    //     }
    //     return false;
    // }
}
