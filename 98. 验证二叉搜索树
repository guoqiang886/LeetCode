给定一个二叉树，判断其是否是一个有效的二叉搜索树。

假设一个二叉搜索树具有如下特征：

节点的左子树只包含小于当前节点的数。
节点的右子树只包含大于当前节点的数。
所有左子树和右子树自身必须也是二叉搜索树。
示例 1:

输入:
    2
   / \
  1   3
输出: true
示例 2:

输入:
    5
   / \
  1   4
     / \
    3   6
输出: false
解释: 输入为: [5,1,4,null,null,3,6]。
     根节点的值为 5 ，但是其右子节点值为 4 。

------------------------------------Code-------------------------------------------
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean isValidBST(TreeNode root) {
        // 方法一：将结点的值与上界和下界（如果有）比较。然后，对左子树和右子树递归进行该过程。
        // return helper(root, null, null);

        // 方法二，中序遍历，然后判断值是否递增
        // 中序遍历使用循环实现
        long preVal = Long.MIN_VALUE;
        TreeNode node = root;
        Stack<TreeNode> stack = new Stack<>();
        while (node != null || !stack.isEmpty()) {
            if (node != null) {
                stack.push(node);
                node = node.left;
            } else {
                node = stack.pop();
                if (node.val <= preVal) return false;
                else preVal = node.val;
                node = node.right;
            }
        }
        return true;
    }

    // public boolean helper(TreeNode root, Integer lower, Integer upper) {
    //     if (root == null) return true;
    //     if (lower != null && root.val <= lower) return false;
    //     if (upper != null && root.val >= upper) return false;
    //     return helper(root.left, lower, root.val) && helper(root.right, root.val, upper);   
    // }
}
