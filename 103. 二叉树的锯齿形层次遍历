 二叉树的锯齿形层次遍历
给定一个二叉树，返回其节点值的锯齿形层次遍历。（即先从左往右，再从右往左进行下一层遍历，以此类推，层与层之间交替进行）。

例如：
给定二叉树 [3,9,20,null,null,15,7],

    3
   / \
  9  20
    /  \
   15   7
返回锯齿形层次遍历如下：

[
  [3],
  [20,9],
  [15,7]
]

---------------------------------------------Code----------------------------------------------
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        // 和层序遍历有点类似，层序遍历利用了队列实现，先入先出
        // 设置一个标记flag，根据flag来判断是否将某一层遍历的结果进行翻转
        if (root == null) return new ArrayList<>();
        
        List<List<Integer>> res = new ArrayList<>();
        
        // flag标记，控制某一层的遍历结果是否反转
        boolean flag = false;
        
        // LinkedList实现了Queue接口
        Queue<TreeNode> queue = new LinkedList<TreeNode>();
        queue.offer(root);
        
        while (!queue.isEmpty()) {
            List<Integer> level = new ArrayList<Integer>();
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                TreeNode tn = queue.poll();
                level.add(tn.val);
                
                if (tn.left != null) queue.offer(tn.left);
                if (tn.right != null) queue.offer(tn.right);
            }
            
            // 如果为true，则反转level
            if (flag) Collections.reverse(level);
            res.add(level);
            
            flag = !flag;
        }
        return res;
    }
}
