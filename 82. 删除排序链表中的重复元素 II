给定一个排序链表，删除所有含有重复数字的节点，只保留原始链表中 没有重复出现 的数字。

示例 1:

输入: 1->2->3->3->4->4->5
输出: 1->2->5
示例 2:

输入: 1->1->1->2->3
输出: 2->3

------------------------------------------Code-------------------------------------------------
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode deleteDuplicates(ListNode head) {
        // 用hash表的暴力方法...
        // if (head == null || head.next == null) return head;
        // Map<Integer, Integer> map = new HashMap<>();
        // ListNode p = head;
        // while (p != null) {
        //     map.put(p.val, map.getOrDefault(p.val, 0) + 1);
        //     p = p.next;
        // }
        // while (head != null && map.get(head.val) > 1) {
        //     head = head.next;
        // }
        // if (head == null) return head;
        // ListNode pre = head;
        // ListNode cur = head.next;
        // while (cur != null) {
        //     if (map.get(cur.val) > 1) {
        //         pre.next = cur.next;
        //     } else {
        //         pre = cur;
        //     }
        //     cur = cur.next;
        // }
        // return head;

        // 解法二 一个虚拟头指针,然后cur.next != null && cur.next.next != null时向后遍历
        ListNode p = new ListNode(-1);
        p.next = head;
        ListNode cur = p;
        while (cur.next != null && cur.next.next != null) {
            if (cur.next.val == cur.next.next.val) {
                ListNode node = cur.next;
                while(node.next != null && node.val == node.next.val) {
                    node = node.next;
                }
                cur.next = node.next; // 注意这里不能执行cur = cur.next;
            } else {
                cur = cur.next;
            }
        }
        return p.next;
    }
}
