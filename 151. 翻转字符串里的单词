给定一个字符串，逐个翻转字符串中的每个单词。

 

示例 1：

输入: "the sky is blue"
输出: "blue is sky the"
示例 2：

输入: "  hello world!  "
输出: "world! hello"
解释: 输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。
示例 3：

输入: "a good   example"
输出: "example good a"
解释: 如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。
 

说明：

无空格字符构成一个单词。
输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。
如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。
 

进阶：

请选用 C 语言的用户尝试使用 O(1) 额外空间复杂度的原地解法。

------------------------------------Code-------------------------------------
class Solution {
    public String reverseWords(String s) {
        // 最初的解法，速度很慢，应该是因为String效率低
        /*
        String res = "";
        boolean flag = true;
        for (int i = 0, j = 0; j < s.length(); j++) {
            while (j < s.length() && s.charAt(j) == ' ')
                j++;
            
            i = j;
            
            while (j < s.length() && s.charAt(j) != ' ')
                j++;
            
            if (i >= s.length()) break;
            
            if (flag) {
                res = s.substring(i, j) + res;
                flag = false;
            } else {
                res  = s.substring(i, j) + " " + res;   
            }
        }
        return res;
        */
        
        // 用StringBuilder代替String能明显提速
        StringBuilder res = new StringBuilder();
        boolean flag = true;
        for (int i = s.length() - 1, j = s.length() - 1; i >=0; i--) {
            while (i >=0 && s.charAt(i) == ' ')
                i--;
            
            j = i + 1;
            
            while (i >= 0 && s.charAt(i) != ' ')
                i--;
            
            if (j <= 0) break;
            
            if (flag) {
                res.append(s.substring(i + 1, j));
                flag = false;
            } else {
                res.append(" " + s.substring(i + 1, j));
            }
        }
        return res.toString();
    }
}
