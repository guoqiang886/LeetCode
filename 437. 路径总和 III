给定一个二叉树，它的每个结点都存放着一个整数值。

找出路径和等于给定数值的路径总数。

路径不需要从根节点开始，也不需要在叶子节点结束，但是路径方向必须是向下的（只能从父节点到子节点）。

二叉树不超过1000个节点，且节点数值范围是 [-1000000,1000000] 的整数。

示例：

root = [10,5,-3,3,2,null,11,3,-2,null,1], sum = 8

      10
     /  \
    5   -3
   / \    \
  3   2   11
 / \   \
3  -2   1

返回 3。和等于 8 的路径有:

1.  5 -> 3
2.  5 -> 2 -> 1
3.  -3 -> 11

----------------------------------------------Code------------------------------------------------------
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public int pathSum(TreeNode root, int sum) {
        return help(root, sum, new int[1000], 0);
    }

    public int help(TreeNode root, int sum, int[] array, int p) {
        /*
         * array数组记录以当前节点root为终点的路径上各个节点的值
         * p记录当前节点在数组中的索引
         */
        if (null == root) return 0;
        int temp = 0, n = 0;
        array[p] = root.val;
        // 从节点root开始向上搜索所有的可能路径数量
        for (int i = p; i >= 0; i--) {
            temp += array[i];
            if (temp == sum) n++;
        }
        int n1 = help(root.left, sum, array, p + 1);
        int n2 = help(root.right, sum, array, p + 1);
        // 返回以root节点为终点的路径数量+以root.left节点为终点的路径数量+root.right节点为终点的路径数量
        return n + n1 + n2;
    }
}
