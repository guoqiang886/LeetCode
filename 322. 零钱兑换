给定不同面额的硬币 coins 和一个总金额 amount。编写一个函数来计算可以凑成总金额所需的最少的硬币个数。如果没有任何一种硬币组合能组成总金额，返回 -1。

示例 1:

输入: coins = [1, 2, 5], amount = 11
输出: 3 
解释: 11 = 5 + 5 + 1
示例 2:

输入: coins = [2], amount = 3
输出: -1
说明:
你可以认为每种硬币的数量是无限的。

-------------------------------------------Code---------------------------------------------
class Solution {
    public int coinChange(int[] coins, int amount) {
        /*
         * 动态规划
         * dp[i]表示凑成总金额i所需的最少硬币数
         * 转移方程：dp[i] = min(dp[i-coin]+1 | coin属于coins)
         */
        int[] dp = new int[amount+1];
        // dp[0] = 0;
        for (int i = 1; i < dp.length; i++) {
            // 注意这里需要将dp[i]初始化为最大值amount + 1(不要初始化为Integer.MAX_VALUE，会溢出)
            dp[i] = amount + 1;
            for (int coin : coins) {
                if (i - coin < 0) continue;
                dp[i] = Math.min(dp[i - coin] + 1, dp[i]);
            }
        }
        // 这里需要根据dp[amount]做一个判断
        return dp[amount] > amount ? -1 : dp[amount];
    }
}
