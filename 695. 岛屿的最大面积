给定一个包含了一些 0 和 1的非空二维数组 grid , 一个 岛屿 是由四个方向 (水平或垂直) 的 1 (代表土地) 构成的组合。你可以假设二维矩阵的四个边缘都被水包围着。

找到给定的二维数组中最大的岛屿面积。(如果没有岛屿，则返回面积为0。)

示例 1:

[[0,0,1,0,0,0,0,1,0,0,0,0,0],
 [0,0,0,0,0,0,0,1,1,1,0,0,0],
 [0,1,1,0,1,0,0,0,0,0,0,0,0],
 [0,1,0,0,1,1,0,0,1,0,1,0,0],
 [0,1,0,0,1,1,0,0,1,1,1,0,0],
 [0,0,0,0,0,0,0,0,0,0,1,0,0],
 [0,0,0,0,0,0,0,1,1,1,0,0,0],
 [0,0,0,0,0,0,0,1,1,0,0,0,0]]
对于上面这个给定矩阵应返回 6。注意答案不应该是11，因为岛屿只能包含水平或垂直的四个方向的‘1’。

示例 2:

[[0,0,0,0,0,0,0,0]]
对于上面这个给定的矩阵, 返回 0。

注意: 给定的矩阵grid 的长度和宽度都不超过 50。

--------------------------------Code--------------------------------------------
class Solution {
    public int maxAreaOfIsland(int[][] grid) {
        // 每个岛屿可以看成一个连通图，求最大面积即求多个连通图的最多顶点的那张图
        // 图的深度优先搜索
        int m = grid.length;
        int n = grid[0].length;
        // 这个题可以不用visited数组来记录是否遍历过
        // boolean[][] visited = new boolean[m][n];
        int max = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) {
                    max = Math.max(dfs(grid, i, j), max);
                }
            }
        }
        return max;
    }
    
    public int dfs(int[][] grid, int x, int y) {
        grid[x][y] = 0;
        int count = 1;
        // 左、上、右、下四个方向搜索
        int[][] offset = {{-1, 0}, {0, -1}, {1, 0}, {0, 1}};
        for (int i = 0; i < 4; i++) {
            int x1 = x + offset[i][0];
            int y1 = y + offset[i][1];
            if (isInGrid(grid, x1, y1) && grid[x1][y1] == 1) {
                count += dfs(grid, x1, y1);
            }
        }
        return count;
    }
    
    // 判断索引是否越界
    public boolean isInGrid(int[][] grid, int x, int y) {
        return x >= 0 && x < grid.length && y >= 0 && y < grid[0].length;
    }
}
