给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。

如果你最多只允许完成一笔交易（即买入和卖出一支股票），设计一个算法来计算你所能获取的最大利润。

注意你不能在买入股票前卖出股票。

示例 1:

输入: [7,1,5,3,6,4]
输出: 5
解释: 在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。
     注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格。
示例 2:

输入: [7,6,4,3,1]
输出: 0
解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。

----------------------------------------------Code-----------------------------------------------
class Solution {
    public int maxProfit(int[] prices) {
        // 动态规划
        // dp[i][k][0]表示第i填不持有股票的最大利润，dp[i][k][1]表示第i填不持有股票的最大利润
        // 转移方程 dp[i][k][0] = max(dp[i-1][k][0], dp[i-1][k][1] + prices[i]) 
        // dp[i][k][1] = max(dp[i-1][k][1], dp[i-1][k-1][0] - prices[i])
        // if (prices == null || prices.length == 0) return 0; 
        // int[][] dp = new int[prices.length][2];
        // dp[0][0] = 0;
        // dp[0][1] = -prices[0];
        // for (int i = 1; i < dp.length; i++) {
        //     dp[i][0] = Math.max(dp[i-1][0], dp[i-1][1] + prices[i]);
        //     dp[i][1] = Math.max(dp[i-1][1], -prices[i]);
        // }
        // return dp[dp.length-1][0];

        // 优化空间复杂度
        int profit0 = 0;
        int profit1 = Integer.MIN_VALUE;
        for (int i = 0; i < prices.length; i++) {
            profit0 = Math.max(profit0, profit1 + prices[i]);
            profit1 = Math.max(profit1, -prices[i]);
        }
        return profit0;
    }
}
