把n个骰子扔在地上，所有骰子朝上一面的点数之和为s。输入n，打印出s的所有可能的值出现的概率。

 

你需要用一个浮点数数组返回答案，其中第 i 个元素代表这 n 个骰子所能掷出的点数集合中第 i 小的那个的概率。

 

示例 1:

输入: 1
输出: [0.16667,0.16667,0.16667,0.16667,0.16667,0.16667]
示例 2:

输入: 2
输出: [0.02778,0.05556,0.08333,0.11111,0.13889,0.16667,0.13889,0.11111,0.08333,0.05556,0.02778]
 

限制：

1 <= n <= 11

-------------------------------------------Code----------------------------------------------
class Solution {
    public double[] twoSum(int n) {
        /*
        // 动态规划
        // dp[i][j]表示投掷了i枚骰子，点数之和为j的次数
        double[] ans = new double[5 * n + 1];
        double all = Math.pow(6, n);
        int[][] dp = new int[n + 1][6 * n + 1];
        // 第一次投掷初始化状态
        for (int j = 1; j <= 6; j++) {
            dp[1][j] = 1;
            // 投掷一次的概率结果
            ans[j - 1] = dp[1][j] / all;
        }
        // 后面的投掷
        for (int i = 2; i < dp.length; i++) {
            for (int j = i; j < dp[i].length; j++) {
                for (int k = 1; k <= 6; k++) {
                    if (j - k > 0) {
                        dp[i][j] += dp[i - 1][j - k];
                    }
                }
                // 投掷n次的概率结果
                if (i == n) ans[j - i] = dp[i][j] / all;
            }
        }
        return ans;
        */
        
        // 对空间复杂度进行优化
        double[] ans = new double[5 * n + 1];
        double all = Math.pow(6, n);
        int[] dp = new int[6 * n + 1];
        for (int i = 1; i <= 6; i++) {
            dp[i] = 1;
            ans[i - 1] = dp[i] / all;
        }
        for (int i = 2; i <= n; i++) {
            // 这里需要逆序遍历，正序遍历会覆盖掉上一次的值(另外j的最大值可以优化为6 * i，最小值为i)
            for (int j = 6 * i; j >= i; j--) {
                // 注意这里需要将dp[j]赋值为0
                dp[j] = 0;
                for (int k = 1; k <= 6; k++) {
                    // 注意这里条件是j - k >= i - 1，即上一次掷骰子的最小点数为i - 1
                    if (j - k >= i - 1) dp[j] += dp[j - k];
                }
                if (i == n) ans[j - i] = dp[j] / all;
            }
        }
        return ans;
    }
}
