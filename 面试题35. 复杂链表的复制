请实现 copyRandomList 函数，复制一个复杂链表。在复杂链表中，每个节点除了有一个 next 指针指向下一个节点，还有一个 random 指针指向链表中的任意节点或者 null。

 

示例 1：



输入：head = [[7,null],[13,0],[11,4],[10,2],[1,0]]
输出：[[7,null],[13,0],[11,4],[10,2],[1,0]]
示例 2：



输入：head = [[1,1],[2,1]]
输出：[[1,1],[2,1]]
示例 3：



输入：head = [[3,null],[3,0],[3,null]]
输出：[[3,null],[3,0],[3,null]]
示例 4：

输入：head = []
输出：[]
解释：给定的链表为空（空指针），因此返回 null。
 

提示：

-10000 <= Node.val <= 10000
Node.random 为空（null）或指向链表中的节点。
节点数目不超过 1000 。

--------------------------------------------Code----------------------------------------------
/*
// Definition for a Node.
class Node {
    int val;
    Node next;
    Node random;

    public Node(int val) {
        this.val = val;
        this.next = null;
        this.random = null;
    }
}
*/
class Solution {
    public Node copyRandomList(Node head) {
        // 用一个Map来记录原节点和新节点的一个映射
        // 时间复杂度和空间复杂度都是O(n)
        // Map<Node, Node> map = new HashMap<>();
        // Node p = head;
        // while (p != null) {
        //     map.put(p, new Node(p.val));
        //     p = p.next;
        // }

        // p = head;
        // while (p != null) {
        //     Node node = map.get(p);
        //     node.next = map.get(p.next);
        //     node.random = map.get(p.random);
        //     p = p.next;
        // }
        // return map.get(head);

        // 深度优先搜索
        // 用Map来记录是否被访问，并且对应的副本节点
        Map<Node, Node> visited = new HashMap<>();
        return dfs(head, visited);
    }

    private Node dfs(Node head, Map<Node, Node> visited) {
        if (head == null) return null;
        if (visited.containsKey(head)) return visited.get(head);
        // 创建一个节点副本
        Node node = new Node(head.val);
        visited.put(head, node);
        node.next = dfs(head.next, visited);
        node.random = dfs(head.random, visited);
        return node;
    }
}
