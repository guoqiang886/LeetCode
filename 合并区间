给出一个区间的集合，请合并所有重叠的区间。

示例 1:

输入: [[1,3],[2,6],[8,10],[15,18]]
输出: [[1,6],[8,10],[15,18]]
解释: 区间 [1,3] 和 [2,6] 重叠, 将它们合并为 [1,6].
示例 2:

输入: [[1,4],[4,5]]
输出: [[1,5]]
解释: 区间 [1,4] 和 [4,5] 可被视为重叠区间。

------------------------------------Code-----------------------------------------
class Solution {
    public int[][] merge(int[][] intervals) {
        // 因为数组长度固定，所以用ArrayList保存结果
        // 输入的数组是无序的，所以需要按照第一个元素先进行排序
        if (intervals.length == 0) return new int[0][0];
        
        // Lamda表达式
        // Arrays.sort(intervals, (a, b) -> a[0] - b[0]);
        
        // 实现自然排序接口,匿名对象,注意泛型对应的是对象，而基本类型的数组则可以看成对象
        Arrays.sort(intervals, new Comparator<int[]>() {
            @Override
            public int compare(int[] o1, int[] o2) {
                return o1[0] - o2[0];
            }
        });
            
        ArrayList<ArrayList<Integer>> array = new ArrayList<ArrayList<Integer>>();
        int start = 0, end = 0;
        for (int i = 0; i < intervals.length - 1; i++) {
            if (intervals[end][1] >= intervals[i+1][0]) {
                end = intervals[end][1] <= intervals[i+1][1] ? i + 1 : end;
            } else {
                ArrayList<Integer> arr = new ArrayList<Integer>();
                arr.add(intervals[start][0]);
                arr.add(intervals[end][1]);
                array.add(arr);
                
                start = i + 1;
                end = i + 1;
            }
        }
        
        ArrayList<Integer> arr = new ArrayList<Integer>();
        arr.add(intervals[start][0]);
        arr.add(intervals[end][1]);
        array.add(arr);
        
        // 将ArrayList转换为数组
        int[][] res = new int[array.size()][2];
        for (int i = 0; i < array.size(); i++) {
            res[i][0] = array.get(i).get(0);
            res[i][1] = array.get(i).get(1);
        }
        return res;
    }
}
