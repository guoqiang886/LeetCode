地上有一个m行n列的方格，从坐标 [0,0] 到坐标 [m-1,n-1] 。一个机器人从坐标 [0, 0] 的格子开始移动，它每次可以向左、右、上、下移动一格（不能移动到方格外），也不能进入行坐标和列坐标的数位之和大于k的格子。例如，当k为18时，机器人能够进入方格 [35, 37] ，因为3+5+3+7=18。但它不能进入方格 [35, 38]，因为3+5+3+8=19。请问该机器人能够到达多少个格子？

 

示例 1：

输入：m = 2, n = 3, k = 1
输出：3
示例 1：

输入：m = 3, n = 1, k = 0
输出：1
提示：

1 <= n,m <= 100
0 <= k <= 20

------------------------------------------------Code------------------------------------------------------
class Solution {

    private int res = 0;
    public int movingCount(int m, int n, int k) {
        // 这种做法错误，因为有可能部分格子被障碍挡住，不能走到
        // int count = 0;
        // for (int i = 0; i < m; i++) {
        //     for (int j = 0; j < n; j++) {
        //         if ((bitSum(i) + bitSum(j)) <= k) count++;
        //     }
        // }
        // return count;
        boolean[][] visited = new boolean[m][n];
        dfs(m, n, 0, 0, k, visited);
        return res;
    }

    // 深度优先搜索
    private void dfs(int m, int n, int x, int y, int k, boolean[][] visited) {
        visited[x][y] = true;
        res++;
        int[][] offsets = {{-1, 0}, {0, -1}, {0, 1}, {1, 0}};
        for (int[] offset : offsets) {
            int newX = x + offset[0];
            int newY = y + offset[1];
            if (inArea(m, n, newX, newY) && !visited[newX][newY] && (bitSum(newX) + bitSum(newY)) <= k) {
                dfs(m, n, newX, newY, k, visited);
            }
        }
    }

    // 判断是否越界
    private boolean inArea(int m, int n, int i, int j) {
        return i >= 0 && i < m && j >= 0 && j < n;
    }

    // 计算每位的和
    private int bitSum(int i) {
        int res = 0;
        while (i > 0) {
            res += i % 10;
            i /= 10;
        }
        return res;
    }
}
