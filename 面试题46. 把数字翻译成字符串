给定一个数字，我们按照如下规则把它翻译为字符串：0 翻译成 “a” ，1 翻译成 “b”，……，11 翻译成 “l”，……，25 翻译成 “z”。一个数字可能有多个翻译。请编程实现一个函数，用来计算一个数字有多少种不同的翻译方法。

 

示例 1:

输入: 12258
输出: 5
解释: 12258有5种不同的翻译，分别是"bccfi", "bwfi", "bczi", "mcfi"和"mzi"
 

提示：

0 <= num < 231

-------------------------------------------Code----------------------------------------------
class Solution {
    private int ans = 0;
    public int translateNum(int num) {
        // 方法一：递归
        // help(String.valueOf(num), 0);
        // return ans;

        // 方法二：动态规划
        if (num < 10) return 1;
        String numStr = String.valueOf(num);
        int[] dp = new int[numStr.length()];
        dp[0] = 1;
        dp[1] = (Integer.parseInt(numStr.substring(0, 2)) >= 10 
            && Integer.parseInt(numStr.substring(0, 2)) <= 25) ? 2 : 1;
        for (int i = 2; i < dp.length; i++) {
            int temp = Integer.parseInt(numStr.substring(i - 1, i + 1));
            if (temp >= 10 && temp <= 25) {
                dp[i] = dp[i - 1] + dp[i - 2];
            } else {
                dp[i] = dp[i - 1];
            }
        }
        return dp[dp.length - 1];
    }

    // 递归搜索
    // public void help(String num, int index) {
    //     if (index >= num.length()) {
    //         ans++;
    //         return;
    //     }
    //     // 一位数的情况，范围为0~9
    //     if (Integer.parseInt(num.substring(index, index + 1)) >= 0 
    //         && Integer.parseInt(num.substring(index, index + 1)) <= 9) {
    //         help(num, index + 1);
    //     }
    //     // 两位数的情况，范围为10~25
    //     if (index < num.length() - 1 
    //         && Integer.parseInt(num.substring(index, index + 2)) >= 10 
    //         && Integer.parseInt(num.substring(index, index + 2)) <= 25) {
    //         help(num, index + 2);
    //     }
    // }
}
