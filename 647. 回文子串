给定一个字符串，你的任务是计算这个字符串中有多少个回文子串。

具有不同开始位置或结束位置的子串，即使是由相同的字符组成，也会被计为是不同的子串。

示例 1:

输入: "abc"
输出: 3
解释: 三个回文子串: "a", "b", "c".
示例 2:

输入: "aaa"
输出: 6
说明: 6个回文子串: "a", "a", "a", "aa", "aa", "aaa".

-------------------------------------------------Code-------------------------------------------------
class Solution {
    public int countSubstrings(String s) {
        /*
         * 暴力求解时间复杂度很高
         * 从回文字符子串中间位置开始统计，回文子串可能的中间位置有2N-1个(每个字符以及字符之间)，N为s的长度
         * 还可以用动态规划，但是动态规划空间复杂度要高一些
         */
        int N = s.length() * 2 - 1;
        int count = 0;
        for (int i = 0; i < N; i++) {
            // 这里的left和right可以画个简单例子就能看出来
            int left = i / 2;
            int right = left + i % 2;
            while (left >= 0 && right < s.length() && s.charAt(left) == s.charAt(right)) {
                left--;
                right++;
                count++;
            }
        }
        return count;   
    }
}
