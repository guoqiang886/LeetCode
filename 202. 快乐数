编写一个算法来判断一个数 n 是不是快乐数。

「快乐数」定义为：对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和，然后重复这个过程直到这个数变为 1，也可能是 无限循环 但始终变不到 1。如果 可以变为  1，那么这个数就是快乐数。

如果 n 是快乐数就返回 True ；不是，则返回 False 。

 

示例：

输入：19
输出：true
解释：
12 + 92 = 82
82 + 22 = 68
62 + 82 = 100
12 + 02 + 02 = 1

---------------------------------------------Code----------------------------------------------
class Solution {
    public boolean isHappy(int n) {
        // 利用HashSet来记录是否出现循环，也就是重复的情况
        // Set<Integer> set = new HashSet<>();
        // while (true) {
        //     set.add(n);
        //     if (n == 1) return true;
        //     int temp = 0;
        //     while (n > 0) {
        //         temp += (n % 10) * (n % 10);
        //         n /= 10;
        //     }
        //     n = temp;
        //     // System.out.println(num);
        //     if (set.contains(n)) return false;
        // }

        // 参考官方题解，如果不是快乐数，则是无限循环小数，即相当于是一个有环的链表
        // 则可以利用快慢指针的方法来判断是否有环
        int slow = n;
        int fast = getNext(getNext(n));
        while (slow != 1 && fast != 1) {
            if (slow == fast) return false;
            slow = getNext(slow);
            fast = getNext(getNext(fast));
        }
        return true;
    }

    public int getNext(int n) {
        int temp = 0;
        while (n > 0) {
            temp += (n % 10) * (n % 10);
            n /= 10;
        }
        return temp;
    }

}
