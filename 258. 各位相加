给定一个非负整数 num，反复将各个位上的数字相加，直到结果为一位数。

示例:

输入: 38
输出: 2 
解释: 各位相加的过程为：3 + 8 = 11, 1 + 1 = 2。 由于 2 是一位数，所以返回 2。

------------------------------------Code----------------------------------------
class Solution {
    public int addDigits(int num) {
        // 递归方法
        // if (num < 10) return num;
        // int sum = 0;
        // while (num > 0) {
        //     sum += num % 10;
        //     num /= 10;
        // }
        // return addDigits(sum);

        // O(1)时间复杂度方法
        /* 思路如下：
        如一个数abcd，它实际是a*1000+b*100+c*10+d。
        而取它的每位数值相加就是a+b+c+d。这两个数中间差了a*999+b*99+c*9。
        这个差值是可以被9整除的，所以这个数其实也等于9X+a+b+c+d，其实每次都是减小了一个9倍数。
        而a+b+c+d所得结果依旧可以继续这样计算。
        所以可以对9求余，如果有余数那么余数就是最后结果，没有余数则最后返回结果9。
        */
        if (num < 10) return num;
        if (num % 9 == 0) return 9;
        else return num % 9;
    }
}
