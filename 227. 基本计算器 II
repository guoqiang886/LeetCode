227. 基本计算器 II
实现一个基本的计算器来计算一个简单的字符串表达式的值。

字符串表达式仅包含非负整数，+， - ，*，/ 四种运算符和空格  。 整数除法仅保留整数部分。

示例 1:

输入: "3+2*2"
输出: 7
示例 2:

输入: " 3/2 "
输出: 1
示例 3:

输入: " 3+5 / 2 "
输出: 5
说明：

你可以假设所给定的表达式都是有效的。
请不要使用内置的库函数 eval。

----------------------------------------------------Code-----------------------------------------------------------
class Solution {
    public int calculate(String s) {
        Stack<Integer> numStack = new Stack<>();
        char sign = '+'; // sign来记录前一个运算符是什么，初始设为'+'
        int num = 0;
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (c >= '0' && c <= '9') { // 为数字
                num = num * 10 - '0' + c; // 这里有个细节，需要先减'0'再加，否则可能溢出
            }
            if (c == '+' || c == '-' || c == '*' || c == '/' || i == s.length() - 1) { // 为操作符或者遍历到了结尾
                if (sign == '+') numStack.push(num);
                if (sign == '-') numStack.push(-num); // 这里细节，前一个操作符是负号，就入栈-num
                if (sign == '*') numStack.push(numStack.pop() * num); // 如果前一个操作符为乘法或除法，则栈顶值乘以当前值再入栈
                if (sign == '/') numStack.push(numStack.pop() / num);
                sign = c;
                num = 0;
            }
        }
        int ans = 0;
        while (!numStack.isEmpty()) {
            ans += numStack.pop();
        }
        return ans;
    }
}
