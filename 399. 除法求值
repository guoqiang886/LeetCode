给出方程式 A / B = k, 其中 A 和 B 均为代表字符串的变量， k 是一个浮点型数字。根据已知方程式求解问题，并返回计算结果。如果结果不存在，则返回 -1.0。

示例 :
给定 a / b = 2.0, b / c = 3.0
问题: a / c = ?, b / a = ?, a / e = ?, a / a = ?, x / x = ? 
返回 [6.0, 0.5, -1.0, 1.0, -1.0 ]

输入为: vector<pair<string, string>> equations, vector<double>& values, vector<pair<string, string>> queries(方程式，方程式结果，问题方程式)， 其中 equations.size() == values.size()，即方程式的长度与方程式结果长度相等（程式与结果一一对应），并且结果值均为正数。以上为方程式的描述。 返回vector<double>类型。

基于上述例子，输入如下：

equations(方程式) = [ ["a", "b"], ["b", "c"] ],
values(方程式结果) = [2.0, 3.0],
queries(问题方程式) = [ ["a", "c"], ["b", "a"], ["a", "e"], ["a", "a"], ["x", "x"] ]. 
输入总是有效的。你可以假设除法运算中不会出现除数为0的情况，且不存在任何矛盾的结果。

--------------------------------------------------------Code------------------------------------------------------------------
class Solution {
    public double[] calcEquation(List<List<String>> equations, double[] values, List<List<String>> queries) {
        // 两个思路：带权重的有向图和并查集
        double[] res = new double[queries.size()];
        Map<String, Map<String, Double>> graph = doGraph(equations, values);
        int index = 0;
        for (List<String> query : queries) {
            res[index++] = dfs(graph, query.get(0), query.get(1), new HashSet<>(), 1.0);
        }
        return res;
    }

    private double dfs(Map<String, Map<String, Double>> graph, String start, String end, Set<String> visited, Double res) {
        if (!graph.containsKey(start) || !graph.containsKey(end)) return -1;
        Map<String, Double> edge = graph.get(start);
        Set<String> keySet = edge.keySet();
        for (String key : keySet) {
            if (!visited.contains(key)) {
                visited.add(key);
                Double value = edge.get(key);
                if (key.equals(end)) return res * value;
                Double d = dfs(graph, key, end, visited, res * value);
                if (d != -1) return d;
            }
        }
        return -1;
    }

    // 构建图
    private Map<String, Map<String, Double>> doGraph(List<List<String>> equations, double[] values) {
        // 用Map保存图的每一个节点和每个节点指向其他点的边
        Map<String, Map<String, Double>> graph = new HashMap<>();
        for (int i = 0; i < equations.size(); i++) {
            String from = equations.get(i).get(0);
            String to = equations.get(i).get(1);
            Double val = values[i];
            
            Map<String, Double> edge = graph.getOrDefault(from, new HashMap<>());
            edge.put(to, val);
            graph.put(from, edge);

            Map<String, Double> edge1 = graph.getOrDefault(to, new HashMap<>());
            edge1.put(from, 1/val);
            graph.put(to, edge1);
        }
        return graph;
    }
}
