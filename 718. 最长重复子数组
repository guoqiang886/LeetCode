给两个整数数组 A 和 B ，返回两个数组中公共的、长度最长的子数组的长度。

 

示例：

输入：
A: [1,2,3,2,1]
B: [3,2,1,4,7]
输出：3
解释：
长度最长的公共子数组是 [3, 2, 1] 。
 

提示：

1 <= len(A), len(B) <= 1000
0 <= A[i], B[i] < 100

---------------------------------------Code--------------------------------------------
class Solution {
    public int findLength(int[] A, int[] B) {
        // 动态规划
        // dp[i][j]表示以A[i]结尾和以B[j]结尾的最长公共子数组长度
        // A[i] == B[j] ? dp[i][j] = dp[i-1][j-1] 否则 dp[i][j] = 0
        int maxLength = 0;
        int[][] dp = new int[A.length][B.length];
        for (int i = 0; i < dp.length; i++) {
            if (A[i] == B[0]) dp[i][0] = 1;
            maxLength = Math.max(maxLength, dp[i][0]);
        }
        for (int j = 0; j < dp[0].length; j++) {
            if (A[0] == B[j]) dp[0][j] = 1;
            maxLength = Math.max(maxLength, dp[0][j]);
        }
        for (int i = 1; i < dp.length; i++) {
            for (int j = 1; j < dp[0].length; j++) {
                if (A[i] == B[j]) {
                    dp[i][j] = dp[i - 1][j - 1] + 1;
                } else {
                    dp[i][j] = 0;
                }
                maxLength = Math.max(maxLength, dp[i][j]);
            }
        }
        return maxLength;
    }
}
