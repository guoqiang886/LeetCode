在一个由 0 和 1 组成的二维矩阵内，找到只包含 1 的最大正方形，并返回其面积。

示例:

输入: 

1 0 1 0 0
1 0 1 1 1
1 1 1 1 1
1 0 0 1 0

输出: 4

-------------------------------------------------Code-----------------------------------------------------
class Solution {
    public int maximalSquare(char[][] matrix) {
        // 暴力解法，效率太低，使用动态规划
        // 画图可以看出，如果matrix[i][j]为1，则dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1
        if (matrix == null || matrix.length == 0) return 0;
        
        int m = matrix.length;
        int n = matrix[0].length;
        int[][] dp = new int[m][n];
        int max = 0;
        
        // 初始化列
        for (int i = 0; i < m; i++) {
            dp[i][0] = matrix[i][0] - '0';
            max = Math.max(dp[i][0], max);
        }
        
        // 初始化行
        for (int j = 0; j < n; j++) {
            dp[0][j] = matrix[0][j] - '0';
            max = Math.max(dp[0][j], max);
        }
        
        // 递推
        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                dp[i][j] = matrix[i][j] == '1' ? Math.min(dp[i-1][j], Math.min(dp[i-1][j-1], dp[i][j-1])) + 1 : 0;
                max = Math.max(dp[i][j], max);
            }
        }
        return max * max;
    }
}
