给你一个链表，每 k 个节点一组进行翻转，请你返回翻转后的链表。

k 是一个正整数，它的值小于或等于链表的长度。

如果节点总数不是 k 的整数倍，那么请将最后剩余的节点保持原有顺序。

 

示例：

给你这个链表：1->2->3->4->5

当 k = 2 时，应当返回: 2->1->4->3->5

当 k = 3 时，应当返回: 3->2->1->4->5

 

说明：

你的算法只能使用常数的额外空间。
你不能只是单纯的改变节点内部的值，而是需要实际进行节点交换。

--------------------------------------------Code--------------------------------------------------
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
        ListNode dummy = new ListNode(-1); // 定义一个虚拟的dummy节点
        dummy.next = head;
        ListNode pre = dummy;
        ListNode cur = dummy;
        while (cur != null) {
            for (int i = 0; i < k && cur != null; i++) {
                cur = cur.next;
            }
            if (cur == null) break; // 如果剩下的数据不足k个节点，则跳出
            ListNode next = cur.next; // 记录下一个待翻转链表头结点
            ListNode start = pre.next; // 记录当前翻转的链表的头结点
            cur.next = null; // 将当前翻转链表尾结点的next节点置为null
            pre.next = reverseListNode(start); // 翻转当前链表头结点
            start.next = next; // 将翻转后的尾结点的next指针指向下一个待翻转链表的头结点

            cur = start;
            pre = cur;
        }
        return dummy.next;
    }

    // 递归翻转链表 也可以用双指针循环翻转链表
    public ListNode reverseListNode(ListNode head) {
        if (head == null || head.next == null) return head;
        ListNode p = reverseListNode(head.next);
        head.next.next = head;
        head.next = null;
        return p;
    }
}
