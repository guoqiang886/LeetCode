输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的循环双向链表。要求不能创建任何新的节点，只能调整树中节点指针的指向。

 

为了让您更好地理解问题，以下面的二叉搜索树为例：

 



 

我们希望将这个二叉搜索树转化为双向循环链表。链表中的每个节点都有一个前驱和后继指针。对于双向循环链表，第一个节点的前驱是最后一个节点，最后一个节点的后继是第一个节点。

下图展示了上面的二叉搜索树转化成的链表。“head” 表示指向链表中有最小元素的节点。

 



 

特别地，我们希望可以就地完成转换操作。当转化完成以后，树中节点的左指针需要指向前驱，树中节点的右指针需要指向后继。还需要返回链表中的第一个节点的指针。

----------------------------------------Code------------------------------------------------
/*
// Definition for a Node.
class Node {
    public int val;
    public Node left;
    public Node right;

    public Node() {}

    public Node(int _val) {
        val = _val;
    }

    public Node(int _val,Node _left,Node _right) {
        val = _val;
        left = _left;
        right = _right;
    }
};
*/
class Solution {
    Node pre, head;
    // List<Node> nodeList = new ArrayList<>();
    public Node treeToDoublyList(Node root) {
        // if (root == null) return null;
        // midTraverse(root);
        // Node head = nodeList.get(0);
        // for (int i = 0; i < nodeList.size(); i++) {
        //     if (i == nodeList.size() - 1) {
        //         nodeList.get(i).right = nodeList.get(0);
        //     } else {
        //         nodeList.get(i).right = nodeList.get(i+1);
        //     }
        // }
        // for (int i = nodeList.size() - 1; i >= 0; i--) {
        //     if (i == 0) {
        //         nodeList.get(i).left = nodeList.get(nodeList.size() - 1);
        //     } else {
        //         nodeList.get(i).left = nodeList.get(i-1);
        //     }
        // }
        // return head;

        if (root == null) return null;
        midTraverse(root);
        // 设置头和尾的指针
        head.left = pre;
        pre.right = head;
        return head;
    }

    // 二叉搜索树中序遍历得到的结果是有序的
    // public void midTraverse(Node root) {
    //     if (root == null) return;
    //     midTraverse(root.left);
    //     nodeList.add(root);
    //     midTraverse(root.right);
    // }

    // 不用List保存的方法,中序遍历过程中直接修改
    public void midTraverse(Node root) {
        if (root == null) return;
        midTraverse(root.left);
        if (pre == null) {
            pre = root;
            head = root;
        } else {
            root.left = pre;
            pre.right = root;
            pre = root;
        }
        midTraverse(root.right);
    }
}
