实现函数double Power(double base, int exponent)，求base的exponent次方。不得使用库函数，同时不需要考虑大数问题。

 

示例 1:

输入: 2.00000, 10
输出: 1024.00000
示例 2:

输入: 2.10000, 3
输出: 9.26100
示例 3:

输入: 2.00000, -2
输出: 0.25000
解释: 2-2 = 1/22 = 1/4 = 0.25
 

说明:

-100.0 < x < 100.0
n 是 32 位有符号整数，其数值范围是 [−231, 231 − 1] 。

-----------------------------------------------Code--------------------------------------------------
class Solution {
    public double myPow(double x, int n) {
        // 递归版本
        // if (n == 0) return 1;
        // if (n == 1) return x;
        // if (n == -1) return 1 / x;
        // double d = myPow(x, n / 2);
        // double mod = myPow(x, n % 2);
        // return d * d * mod;

        // 循环版本
        // 思路：指数n转换为二进制来理解
        // 例如：n = 10,二进制就是n = 1010,则x^1010 = x^1000 * x ^ 10
        // 将n转换为long类型，避免负数边界值取正数溢出
        long N = n;
        double res = 1;
        if (N < 0) {
            N = -N;
            x = 1 / x;
        }
        while (N != 0) {
            if ((N & 1) == 1) res *= x;
            x *= x;
            N >>= 1;
        }
        return res;
    }
}
