假设有打乱顺序的一群人站成一个队列。 每个人由一个整数对(h, k)表示，其中h是这个人的身高，k是排在这个人前面且身高大于或等于h的人数。 编写一个算法来重建这个队列。

注意：
总人数少于1100人。

示例

输入:
[[7,0], [4,4], [7,1], [5,0], [6,1], [5,2]]

输出:
[[5,0], [7,0], [5,2], [6,1], [4,4], [7,1]]

-----------------------------------------------Code---------------------------------------------
class Solution {
    public int[][] reconstructQueue(int[][] people) {
        /* 贪心算法
         * 先按照身高降序，身高相同则按人数升序的方式对people进行排序
         * 身高矮的对于身高高的来说是“看不见的”，所以先安排身高高的
         * 后续安排矮的对之前安排的高的不会有影响
         */
        Arrays.sort(people, new Comparator<int[]>() {
            @Override
            public int compare(int[] o1, int[] o2) {
                // 注意这里身高相同时，则根据人数升序排列，因为需要先安排人数少的
                return o1[0] == o2[0] ? o1[1] - o2[1] : o2[0] - o1[0];
            }
        });

        // 使用LinkedList插入效率高
        List<int[]> res = new LinkedList<>();
        for (int[] p: people) {
            res.add(p[1], p);
        }
        return res.toArray(new int[res.size()][2]);
    }
}
