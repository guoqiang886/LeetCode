合并 k 个排序链表，返回合并后的排序链表。请分析和描述算法的复杂度。

示例:

输入:
[
  1->4->5,
  1->3->4,
  2->6
]
输出: 1->1->2->3->4->4->5->6

-------------------------------------Code----------------------------------------
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        // 使用优先队列来存放链表数组
        // 还可以先遍历所有链表的每个元素，然后排序得出结果
        // 匿名类重写Comparator接口
        /*
        PriorityQueue<ListNode> queue = new PriorityQueue<ListNode>(new Comparator<ListNode>() {
            @Override
            public int compare(ListNode o1, ListNode o2) {
                return o1.val - o2.val;
            }
        });
        */
        
        // java 8的lamda表达式写匿名类
         PriorityQueue<ListNode> queue = new PriorityQueue<ListNode>((ListNode o1, ListNode o2) -> o1.val - o2.val);
        
        
        for (ListNode node : lists) {
            // 注意这里需要判断node节点是否为null
            if (node != null) queue.offer(node);
        }
        
        ListNode res = new ListNode(-1);
        ListNode cur = res;
        while (!queue.isEmpty()) {
            ListNode p = queue.poll();
            cur.next = p;
            cur = cur.next;
            
            if (p.next != null) queue.offer(p.next);
        }
        return res.next;
    }
}
