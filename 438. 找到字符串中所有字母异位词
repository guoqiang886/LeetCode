给定一个字符串 s 和一个非空字符串 p，找到 s 中所有是 p 的字母异位词的子串，返回这些子串的起始索引。

字符串只包含小写英文字母，并且字符串 s 和 p 的长度都不超过 20100。

说明：

字母异位词指字母相同，但排列不同的字符串。
不考虑答案输出的顺序。
示例 1:

输入:
s: "cbaebabacd" p: "abc"

输出:
[0, 6]

解释:
起始索引等于 0 的子串是 "cba", 它是 "abc" 的字母异位词。
起始索引等于 6 的子串是 "bac", 它是 "abc" 的字母异位词。
 示例 2:

输入:
s: "abab" p: "ab"

输出:
[0, 1, 2]

解释:
起始索引等于 0 的子串是 "ab", 它是 "ab" 的字母异位词。
起始索引等于 1 的子串是 "ba", 它是 "ab" 的字母异位词。
起始索引等于 2 的子串是 "ab", 它是 "ab" 的字母异位词。

-------------------------------------------Code---------------------------------------------------
class Solution {
    public List<Integer> findAnagrams(String s, String p) {
        List<Integer> res = new ArrayList<>();
        // left、right双指针
        int left = 0, right = 0;
        // match记录window中符合要求的字符的数量
        int match = 0;
        // needs Map用于保存p
        Map<Character, Integer> needs = new HashMap<>();
        for (int i = 0; i < p.length(); i++) {
            // getOrDefault方法，存在该key，则返回对应value，不存在，则返回默认值
            needs.put(p.charAt(i), needs.getOrDefault(p.charAt(i), 0) + 1);
        }
        // window保存滑动窗口内出现的值
        Map<Character, Integer> window = new HashMap<>();
        
        while (right < s.length()) {
            char c = s.charAt(right);
            if (needs.containsKey(c)) {
                window.put(c, window.getOrDefault(c, 0) + 1);
                // 如果字符c在needs中出现的次数与在windows出现的次数相等，则match++
                // 注意：这里不能用“==”,因为Integer的自动拆装箱有范围，超出范围不能自动拆装箱
                if (window.get(c).equals(needs.get(c))) {
                    System.out.println(match);
                    match++;
                }
            }

            // 进入该while循环时，window和needs的所有key相同，但是对应的value值window更大
            while (match == needs.size()) {
                if (right - left + 1 == p.length()) res.add(left);
                char c1 = s.charAt(left);
                if (window.containsKey(c1)) {
                    window.put(c1, window.get(c1) - 1);
                    if (window.get(c1) < needs.get(c1)) {
                        // 此时window滑动窗子串已经不符合要求
                        match--;
                    }
                }
                left++;
            }
            right++;
        }
        return res;
    }
}
