给定一棵二叉树，想象自己站在它的右侧，按照从顶部到底部的顺序，返回从右侧所能看到的节点值。

示例:

输入: [1,2,3,null,5,null,4]
输出: [1, 3, 4]
解释:

   1            <---
 /   \
2     3         <---
 \     \
  5     4       <---

-----------------------------------------------Code-----------------------------------------------------
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    List<Integer> res = new ArrayList<>();
    public List<Integer> rightSideView(TreeNode root) {
        // 思路一：层序遍历
        // if (root == null) return new ArrayList<>();
        // List<Integer> ans = new ArrayList<>();
        // Queue<TreeNode> queue = new LinkedList<>();
        // queue.offer(root);
        // while (!queue.isEmpty()) {
        //     int size = queue.size();
        //     for (int i = 0; i < size; i++) {
        //         TreeNode node = queue.poll();
        //         if (node.left != null) queue.offer(node.left);
        //         if (node.right != null) queue.offer(node.right);
        //         if (i == size - 1) ans.add(node.val);
        //     }
        // }
        // return ans;

        // 解法二：DFS 根节点->右子树->左子树的遍历方式，保证每层第一个遍历到的总是最右边的节点
        help(root, 0);
        return res;
    }

    public void help(TreeNode root, int depth) { // depth表示当前的深度
        if (root == null) return;
        if (depth == res.size()) res.add(root.val); // 如果第一次进入深度为depth的位置，则将root.val加进结果集里面
        depth++;
        help(root.right, depth);
        help(root.left, depth);
    }
}
