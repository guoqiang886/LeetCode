给定一些标记了宽度和高度的信封，宽度和高度以整数对形式 (w, h) 出现。当另一个信封的宽度和高度都比这个信封大的时候，这个信封就可以放进另一个信封里，如同俄罗斯套娃一样。

请计算最多能有多少个信封能组成一组“俄罗斯套娃”信封（即可以把一个信封放到另一个信封里面）。

说明:
不允许旋转信封。

示例:

输入: envelopes = [[5,4],[6,4],[6,7],[2,3]]
输出: 3 
解释: 最多信封的个数为 3, 组合为: [2,3] => [5,4] => [6,7]。

--------------------------------------------Code-----------------------------------------------
class Solution {
    public int maxEnvelopes(int[][] envelopes) {
        /*
        思路：先按照w从小到大对信封进行排序
              然后再从依据w排序后的h中找出最长递增子序列
              但是这里存在w相同的情况，w相同，再取h的最长递增子序列时，会出错
              所以这里有一个技巧，就是当w相同时，h就降序排列，这样便能得到正确的结果
        最长递增子序列思路：
              动态规划：dp数组表示以arr[i]结尾的最长递增子序列大小
              动态转移方程：如果arr[i] > arr[j]，则dp[i] = max(dp[i], dp[j] + 1)
        */
        // 对envelopes二维数组进行排序，注意这里Comparator接口的泛型也是数组，注意java中数组也是对象
        if (envelopes == null || envelopes.length == 0) return 0;
        
        Arrays.sort(envelopes, new Comparator<int[]>() {
           @Override
            public int compare(int[] i1, int[] i2) {
                int num1 = i1[0] - i2[0];
                int num2 = i2[1] - i1[1];
                return num1 == 0 ? num2 : num1;
            }
        });
        
        return getLIS(envelopes);
    }
    
    // 求最长递增子序列（LIS）方法，这里用动态规划，时间复杂度为O(n2)，这里貌似还有更优O(nlogn)的解法
    public int getLIS(int[][] arr) {
        // maxLength记录最长递增子序列的长度
        int maxLength = 1;
        int[] dp = new int[arr.length];
        for (int i = 0; i < arr.length; i++) {
            dp[i] = 1;
            for (int j = 0; j < i; j++) {
                if (arr[j][1] < arr[i][1]) {
                    dp[i] = Math.max(dp[j] + 1, dp[i]);
                }
            }
            if (maxLength < dp[i]) maxLength = dp[i];
        }
        return maxLength;
    }
}
