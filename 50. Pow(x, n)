实现 pow(x, n) ，即计算 x 的 n 次幂函数。

示例 1:

输入: 2.00000, 10
输出: 1024.00000
示例 2:

输入: 2.10000, 3
输出: 9.26100
示例 3:

输入: 2.00000, -2
输出: 0.25000
解释: 2-2 = 1/22 = 1/4 = 0.25
说明:

-100.0 < x < 100.0
n 是 32 位有符号整数，其数值范围是 [−231, 231 − 1] 。

--------------------------------Code--------------------------------------
class Solution {
    public double myPow(double x, int n) {
        // 快速幂
        // 方法一：递归+分治
        // return n > 0 ? help(x, n) : help(1 / x, -n);

        // 迭代版本
        long m = n;
        // 处理n为负数的情况
        if (m < 0) {
            m = -m;
            x = 1 / x;
        }
        double ans = 1.0;
        // 这里其实就是不断将x的n次方分解为x平方的n/2次方的过程
        while (m > 0) {
            if (m % 2 == 1) ans *= x; 
            x *= x;
            m /= 2;
        }
        return ans;
    }

    public double help(double x, long n) {
        if (n == 0) return 1.0d;
        double tmp = help(x, n / 2);
        if (n % 2 == 0) return tmp * tmp;
        else return tmp * tmp * x;
    }

}
