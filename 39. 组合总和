给定一个无重复元素的数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。

candidates 中的数字可以无限制重复被选取。

说明：

所有数字（包括 target）都是正整数。
解集不能包含重复的组合。 
示例 1:

输入: candidates = [2,3,6,7], target = 7,
所求解集为:
[
  [7],
  [2,2,3]
]
示例 2:

输入: candidates = [2,3,5], target = 8,
所求解集为:
[
  [2,2,2,2],
  [2,3,3],
  [3,5]
]

----------------------------------------------Code----------------------------------------------
class Solution {
    private List<List<Integer>> res = new ArrayList<>();
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        // Arrays.sort(candidates);
        help(candidates, target, new ArrayList<>(), 0);
        return res;
    }

    // 有一个注意的点：解集不能包含重复的元素，所以依次进行确定
    // 先确定candidates[0]的数量，再确定candidates[1]的数量，所以额外增加了index变量
    public void help(int[] candidates, int target, List<Integer> list, int index) {
        if (target == 0) {
            res.add(new ArrayList<>(list));
            return;
        } else if (target < 0) {
            return;
        } else {
            for (int i = index; i < candidates.length; i++) {
                // 另外这里不需要每次都创建一个新的List,只需要每次添加后再删除该元素即可
                list.add(candidates[i]);
                help(candidates, target - candidates[i], list, i);
                list.remove(list.size() - 1);
            }
        }
    }
}
