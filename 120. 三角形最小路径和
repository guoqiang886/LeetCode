给定一个三角形，找出自顶向下的最小路径和。每一步只能移动到下一行中相邻的结点上。

例如，给定三角形：

[
     [2],
    [3,4],
   [6,5,7],
  [4,1,8,3]
]
自顶向下的最小路径和为 11（即，2 + 3 + 5 + 1 = 11）。

说明：

如果你可以只使用 O(n) 的额外空间（n 为三角形的总行数）来解决这个问题，那么你的算法会很加分。

------------------------------------Code----------------------------------------
class Solution {
    public int minimumTotal(List<List<Integer>> triangle) {
        // 求最短路径，num[i][j] = min(num[i-1][j-1], num[i-1][j])
        // 符合空间复杂度O(n)要求，但是貌似时间复杂度较大
        int[] res = new int[triangle.get(triangle.size()-1).size()];
        // res[0] = triangle.get(0).get(0);
        for (int i = 0; i < triangle.size(); i++) {
            int pre = res[0];
            for (int j = 0; j < triangle.get(i).size(); j++) {
                if (j == 0 || j == triangle.get(i).size() - 1) {
                    res[j] = triangle.get(i).get(j) + pre;
                } else {
                    int temp = res[j];
                    res[j] = triangle.get(i).get(j) + Math.min(pre, res[j]);
                    pre = temp;
                }
            }
        }
                
        // 求出res数组最小值，即最短路径
        int min = res[0];
        for (int i = 0; i < res.length; i++) {
            if (min > res[i]) min = res[i]; 
        }
        return min;
    }
}
