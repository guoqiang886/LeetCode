输入整数数组 arr ，找出其中最小的 k 个数。例如，输入4、5、1、6、2、7、3、8这8个数字，则最小的4个数字是1、2、3、4。

 

示例 1：

输入：arr = [3,2,1], k = 2
输出：[1,2] 或者 [2,1]
示例 2：

输入：arr = [0,1,2,1], k = 1
输出：[0]
 

限制：

0 <= k <= arr.length <= 10000
0 <= arr[i] <= 10000

----------------------------------------------Code---------------------------------------------------
class Solution {
    public int[] getLeastNumbers(int[] arr, int k) {
        // PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());
        // for (int i : arr) {
        //     pq.offer(i);
        //     if (pq.size() > k) {
        //         pq.poll();
        //     }
        // }
        // int[] ans = new int[k];
        // for (int i = 0; i < k; i++) {
        //     ans[i] = pq.poll();
        // }
        // return ans;

        // 快速排序版本，时间复杂度可以到o(n)，最差o(n^2)
        help(arr, k, 0, arr.length - 1);
        int[] ans = new int[k];
        for (int i = 0; i < k; i++) {
            ans[i] = arr[i];
        }
        return ans;
    }

    // 快速排序最差时间复杂度为o(n^2)，在选择key时，可以使用随机选取的策略，避免极端情况发生
    public void help(int[] arr, int k, int left, int right) {
        // if (left >= right) return; // 快排的结束条件，可以省略
        int key = arr[left];
        int i = left, j = right;
        while (i < j) {
            // 注意这里必须先从右至左遍历，才能保证arr[i]是小于等于key的!!!
            while (i < j && arr[j] >= key) {
                j--;
            }
            while (i < j && arr[i] <= key) {
                i++;
            }
            if (i < j) {
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }
        arr[left] = arr[i];
        arr[i] = key;

        if (i == k || i == arr.length - 1) { // 这里存在k刚好为数组长度的情况
            return;
        } else if (i > k) {
            help(arr, k, left, i - 1);
        } else {
            help(arr, k, i + 1, right);
        }
    }
}
