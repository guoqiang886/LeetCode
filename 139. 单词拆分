给定一个非空字符串 s 和一个包含非空单词列表的字典 wordDict，判定 s 是否可以被空格拆分为一个或多个在字典中出现的单词。

说明：

拆分时可以重复使用字典中的单词。
你可以假设字典中没有重复的单词。
示例 1：

输入: s = "leetcode", wordDict = ["leet", "code"]
输出: true
解释: 返回 true 因为 "leetcode" 可以被拆分成 "leet code"。
示例 2：

输入: s = "applepenapple", wordDict = ["apple", "pen"]
输出: true
解释: 返回 true 因为 "applepenapple" 可以被拆分成 "apple pen apple"。
     注意你可以重复使用字典中的单词。
示例 3：

输入: s = "catsandog", wordDict = ["cats", "dog", "sand", "and", "cat"]
输出: false

------------------------------------Code----------------------------------------
class Solution {
    public boolean wordBreak(String s, List<String> wordDict) {
        /*
         * Set保存wordDick，查询的效率为O(1)
         * 回溯法的时间复杂度很高，会超时
         * 采用动态规划的方法
         * 动态规划详细解释见leetcode网站的官方题解
         * https://leetcode-cn.com/problems/word-break/solution/dan-ci-chai-fen-by-leetcode/
         */
        // Set<String> wordSet = new HashSet<>();
        // for (String str : wordDict) {
        //     wordSet.add(str);
        // }
        // return isWords(s, wordSet);
        Set<String> wordSet = new HashSet<>(wordDict);
        boolean[] dp = new boolean[s.length() + 1];
        dp[0] = true;
        for (int i = 1; i <= s.length(); i++) {
            for (int j = 0; j < i; j++) {
                if (dp[j] && wordSet.contains(s.substring(j, i))) {
                    dp[i] = true;
                    break;
                }
            }
        }
        return dp[s.length()];
    }

    /*
    public boolean isWords(String s, Set<String> set) {
        if (s.length() == 0) return true;
        for (int i = 1; i <= s.length(); i++) {
            if (set.contains(s.substring(0, i)) && isWords(s.substring(i), set)) {
                return true;
            }
        }
        return false;
    }
    */
}
