给定一个二维网格和一个单词，找出该单词是否存在于网格中。

单词必须按照字母顺序，通过相邻的单元格内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母不允许被重复使用。

示例:

board =
[
  ['A','B','C','E'],
  ['S','F','C','S'],
  ['A','D','E','E']
]

给定 word = "ABCCED", 返回 true.
给定 word = "SEE", 返回 true.
给定 word = "ABCB", 返回 false.

----------------------------------------------Code----------------------------------------------
class Solution {
    public boolean exist(char[][] board, String word) {
        /*
         * 回溯，深度优先搜索，状态重置
         */
        int m = board.length;
        int n = board[0].length;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i][j] == word.charAt(0)) {
                    boolean[][] isChecked = new boolean[m][n];
                    isChecked[i][j] = true;
                    if (helper(board, word.substring(1), isChecked, i, j)) return true;
                }
            }
        }
        return false;
    }

    public boolean helper(char[][] board, String word, boolean[][] Checked, int i, int j) {
        if (word.length() == 0) return true;
        int[][] offset = {{-1, 0}, {0, -1}, {1, 0}, {0, 1}};
        for (int k = 0; k < offset.length; k++) {
            boolean[][] isChecked = Checked;
            int x = i + offset[k][0];
            int y = j + offset[k][1];
            if (isInBoard(board, x, y) && !isChecked[x][y] && board[x][y] == word.charAt(0)) {
                isChecked[x][y] = true;
                if (helper(board, word.substring(1), isChecked, x, y)) return true;
                // 这一步很重要，如果某个方向不能走通的话，需要将之前isChecked重置为false
                isChecked[x][y] = false;
            }
        }
        return false;
    }
    public boolean isInBoard(char[][] board, int i, int j) {
        return i < board.length && i >= 0 && j < board[0].length && j >= 0;
    }
}
