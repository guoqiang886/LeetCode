给定一个包含非负整数的 m x n 网格，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。

说明：每次只能向下或者向右移动一步。

示例:

输入:
[
  [1,3,1],
  [1,5,1],
  [4,2,1]
]
输出: 7
解释: 因为路径 1→3→1→1→1 的总和最小。

------------------------------------------Code-------------------------------------------
class Solution {
    public int minPathSum(int[][] grid) {
        /*
         * 动态规划进行搜索(注意题目给定的是只能向下或者向右移动，不能向左和向上移动)
         * dp[i][j]记录左上角到dp[i][j]的最小数字和
         * 貌似还可以直接把grid当成dp数组进行操作，这样可以减少空间复杂度
         */
        int m = grid.length;
        int n = grid[0].length;
        int[][] dp = new int[m][n];
        dp[0][0] = grid[0][0];

        // 对第一列进行初始化
        for (int i = 1; i < m; i++) {
            dp[i][0] = dp[i-1][0] + grid[i][0];
        }
        
        // 对第一行进行初始化
        for (int j = 1; j < n; j++) {
            dp[0][j] = dp[0][j-1] +  grid[0][j];
        }

        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                dp[i][j] = grid[i][j] + Math.min(dp[i-1][j], dp[i][j-1]);
            }
        }
        return dp[m-1][n-1];
    }
}
