给定一个整数数组和一个整数 k，你需要找到该数组中和为 k 的连续的子数组的个数。

示例 1 :

输入:nums = [1,1,1], k = 2
输出: 2 , [1,1] 与 [1,1] 为两种不同的情况。
说明 :

数组的长度为 [1, 20,000]。
数组中元素的范围是 [-1000, 1000] ，且整数 k 的范围是 [-1e7, 1e7]。

------------------------------------------Code-----------------------------------------------
class Solution {
    public int subarraySum(int[] nums, int k) {
        /*
         * 使用累加和的方式，用HashMap存储累加和出现的次数
         */
        Map<Integer, Integer> map = new HashMap<>();
        int count = 0;
        int sum = 0;
        // 表示初始时，累加和0出现了一次
        map.put(sum, 1);
        for (int i = 0; i < nums.length; i++) {
            sum += nums[i];
            if (map.containsKey(sum - k)) count += map.get(sum-k);
            // getOrDefault方法，如果存在key则返回对应的键值，如果不存在，则返回设定的默认值
            map.put(sum, map.getOrDefault(sum, 0) + 1);
        }
        return count;
    }
}
